#pragma once

#include <d3d9.h>
#include <d3d9types.h>
#include <opmapi.h>
#include <wrl/client.h>
#include "CryptUtil.h"

using namespace Microsoft::WRL;

FLAG_NAME_PAIRW OPM_STATUS_flag_names[] = {
	DECL_TUPLE_W(OPM_STATUS_LINK_LOST),
	DECL_TUPLE_W(OPM_STATUS_RENEGOTIATION_REQUIRED),
	DECL_TUPLE_W(OPM_STATUS_TAMPERING_DETECTED),
	DECL_TUPLE_W(OPM_STATUS_REVOKED_HDCP_DEVICE_ATTACHED),
};

FLAG_NAME_PAIRW OPM_PROTECTION_TYPE_flag_names[] = {
	DECL_TUPLE_W(OPM_PROTECTION_TYPE_OTHER),
	DECL_TUPLE_W(OPM_PROTECTION_TYPE_COPP_COMPATIBLE_HDCP),
	DECL_TUPLE_W(OPM_PROTECTION_TYPE_ACP),
	DECL_TUPLE_W(OPM_PROTECTION_TYPE_CGMSA),
	DECL_TUPLE_W(OPM_PROTECTION_TYPE_HDCP),
	DECL_TUPLE_W(OPM_PROTECTION_TYPE_DPCP),
	DECL_TUPLE_W(OPM_PROTECTION_TYPE_TYPE_ENFORCEMENT_HDCP)
};

FLAG_NAME_PAIRW OPM_BUS_TYPE_flag_names[] = {
	DECL_TUPLE_W(OPM_BUS_TYPE_PCI),
	DECL_TUPLE_W(OPM_BUS_TYPE_PCIX),
	DECL_TUPLE_W(OPM_BUS_TYPE_PCIEXPRESS),
	DECL_TUPLE_W(OPM_BUS_TYPE_AGP),
	DECL_TUPLE_W(OPM_BUS_IMPLEMENTATION_MODIFIER_INSIDE_OF_CHIPSET),
	DECL_TUPLE_W(OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP),
	DECL_TUPLE_W(OPM_BUS_IMPLEMENTATION_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET),
	DECL_TUPLE_W(OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR),
	DECL_TUPLE_W(OPM_BUS_IMPLEMENTATION_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE),
	DECL_TUPLE_W(OPM_BUS_IMPLEMENTATION_MODIFIER_NON_STANDARD),
	DECL_TUPLE_W(OPM_COPP_COMPATIBLE_BUS_TYPE_INTEGRATED),
};

FLAG_NAME_PAIRW TV_PROTECTION_STD_flag_names[] = {
	DECL_TUPLE_W(OPM_PROTECTION_STANDARD_OTHER),
	DECL_TUPLE_W(OPM_PROTECTION_STANDARD_IEC61880_525I),
	DECL_TUPLE_W(OPM_PROTECTION_STANDARD_IEC61880_2_525I),
	DECL_TUPLE_W(OPM_PROTECTION_STANDARD_IEC62375_625P),
	DECL_TUPLE_W(OPM_PROTECTION_STANDARD_EIA608B_525),
	DECL_TUPLE_W(OPM_PROTECTION_STANDARD_EN300294_625I),
	DECL_TUPLE_W(OPM_PROTECTION_STANDARD_CEA805A_TYPEA_525P),
	DECL_TUPLE_W(OPM_PROTECTION_STANDARD_CEA805A_TYPEA_750P),
	DECL_TUPLE_W(OPM_PROTECTION_STANDARD_CEA805A_TYPEA_1125I),
	DECL_TUPLE_W(OPM_PROTECTION_STANDARD_CEA805A_TYPEB_525P),
	DECL_TUPLE_W(OPM_PROTECTION_STANDARD_CEA805A_TYPEB_750P),
	DECL_TUPLE_W(OPM_PROTECTION_STANDARD_CEA805A_TYPEB_1125I),
	DECL_TUPLE_W(OPM_PROTECTION_STANDARD_ARIBTRB15_525I),
	DECL_TUPLE_W(OPM_PROTECTION_STANDARD_ARIBTRB15_525P),
	DECL_TUPLE_W(OPM_PROTECTION_STANDARD_ARIBTRB15_750P),
	DECL_TUPLE_W(OPM_PROTECTION_STANDARD_ARIBTRB15_1125I),
};

#define SampleFormat_NameW(x)	(\
	DECL_ENUM_ITEMW(x, DXVA2_SampleProgressiveFrame)\
	DECL_ENUM_ITEMW(x, DXVA2_SampleFieldInterleavedEvenFirst)\
	DECL_ENUM_ITEMW(x, DXVA2_SampleFieldInterleavedOddFirst)\
	DECL_ENUM_ITEMW(x, DXVA2_SampleFieldSingleEven)\
	DECL_ENUM_ITEMW(x, DXVA2_SampleFieldSingleOdd)\
	DECL_ENUM_LAST_ITEMW(x, DXVA2_SampleSubStream, L"Unknown"))))))))

#define D3DFormat_NameW(x)		(\
	DECL_ENUM_ITEMW(x, D3DFMT_R8G8B8)\
	DECL_ENUM_ITEMW(x, D3DFMT_A8R8G8B8)\
	DECL_ENUM_ITEMW(x, D3DFMT_X8R8G8B8)\
	DECL_ENUM_ITEMW(x, D3DFMT_R5G6B5)\
	DECL_ENUM_ITEMW(x, D3DFMT_X1R5G5B5)\
	DECL_ENUM_ITEMW(x, D3DFMT_A1R5G5B5)\
	DECL_ENUM_ITEMW(x, D3DFMT_A4R4G4B4)\
	DECL_ENUM_ITEMW(x, D3DFMT_R3G3B2)\
	DECL_ENUM_ITEMW(x, D3DFMT_A8)\
	DECL_ENUM_ITEMW(x, D3DFMT_A8R3G3B2)\
	DECL_ENUM_ITEMW(x, D3DFMT_X4R4G4B4)\
	DECL_ENUM_ITEMW(x, D3DFMT_A2B10G10R10)\
	DECL_ENUM_ITEMW(x, D3DFMT_A8B8G8R8)\
	DECL_ENUM_ITEMW(x, D3DFMT_X8B8G8R8)\
	DECL_ENUM_ITEMW(x, D3DFMT_G16R16)\
	DECL_ENUM_ITEMW(x, D3DFMT_A2R10G10B10)\
	DECL_ENUM_ITEMW(x, D3DFMT_A16B16G16R16)\
	DECL_ENUM_ITEMW(x, D3DFMT_A8P8)\
	DECL_ENUM_ITEMW(x, D3DFMT_P8)\
	DECL_ENUM_ITEMW(x, D3DFMT_L8)\
	DECL_ENUM_ITEMW(x, D3DFMT_A8L8)\
	DECL_ENUM_ITEMW(x, D3DFMT_A4L4)\
	DECL_ENUM_ITEMW(x, D3DFMT_V8U8)\
	DECL_ENUM_ITEMW(x, D3DFMT_L6V5U5)\
	DECL_ENUM_ITEMW(x, D3DFMT_X8L8V8U8)\
	DECL_ENUM_ITEMW(x, D3DFMT_Q8W8V8U8)\
	DECL_ENUM_ITEMW(x, D3DFMT_V16U16)\
	DECL_ENUM_ITEMW(x, D3DFMT_A2W10V10U10)\
	DECL_ENUM_ITEMW(x, D3DFMT_UYVY)\
	DECL_ENUM_ITEMW(x, D3DFMT_R8G8_B8G8)\
	DECL_ENUM_ITEMW(x, D3DFMT_YUY2)\
	DECL_ENUM_ITEMW(x, D3DFMT_G8R8_G8B8)\
	DECL_ENUM_ITEMW(x, D3DFMT_DXT1)\
	DECL_ENUM_ITEMW(x, D3DFMT_DXT2)\
	DECL_ENUM_ITEMW(x, D3DFMT_DXT3)\
	DECL_ENUM_ITEMW(x, D3DFMT_DXT4)\
	DECL_ENUM_ITEMW(x, D3DFMT_DXT5)\
	DECL_ENUM_ITEMW(x, D3DFMT_D16_LOCKABLE)\
	DECL_ENUM_ITEMW(x, D3DFMT_D32)\
	DECL_ENUM_ITEMW(x, D3DFMT_D15S1)\
	DECL_ENUM_ITEMW(x, D3DFMT_D24S8)\
	DECL_ENUM_ITEMW(x, D3DFMT_D24X8)\
	DECL_ENUM_ITEMW(x, D3DFMT_D24X4S4)\
	DECL_ENUM_ITEMW(x, D3DFMT_D16)\
	DECL_ENUM_ITEMW(x, D3DFMT_D32F_LOCKABLE)\
	DECL_ENUM_ITEMW(x, D3DFMT_D24FS8)\
	DECL_ENUM_ITEMW(x, D3DFMT_D32_LOCKABLE)\
	DECL_ENUM_ITEMW(x, D3DFMT_S8_LOCKABLE)\
	DECL_ENUM_ITEMW(x, D3DFMT_L16)\
	DECL_ENUM_ITEMW(x, D3DFMT_VERTEXDATA)\
	DECL_ENUM_ITEMW(x, D3DFMT_INDEX16)\
	DECL_ENUM_ITEMW(x, D3DFMT_INDEX32)\
	DECL_ENUM_ITEMW(x, D3DFMT_Q16W16V16U16)\
	DECL_ENUM_ITEMW(x, D3DFMT_MULTI2_ARGB8)\
	DECL_ENUM_ITEMW(x, D3DFMT_R16F)\
	DECL_ENUM_ITEMW(x, D3DFMT_G16R16F)\
	DECL_ENUM_ITEMW(x, D3DFMT_A16B16G16R16F)\
	DECL_ENUM_ITEMW(x, D3DFMT_R32F)\
	DECL_ENUM_ITEMW(x, D3DFMT_G32R32F)\
	DECL_ENUM_ITEMW(x, D3DFMT_A32B32G32R32F)\
	DECL_ENUM_ITEMW(x, D3DFMT_CxV8U8)\
	DECL_ENUM_ITEMW(x, D3DFMT_A1)\
	DECL_ENUM_ITEMW(x, D3DFMT_A2B10G10R10_XR_BIAS)\
	DECL_ENUM_LAST_ITEMW(x, D3DFMT_BINARYBUFFER, L"Unknown"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

#define OPM_ACP_LEVEL_NAMEW(x)	(\
	DECL_ENUM_ITEMW(x, OPM_ACP_OFF)\
	DECL_ENUM_ITEMW(x, OPM_ACP_LEVEL_ONE)\
	DECL_ENUM_ITEMW(x, OPM_ACP_LEVEL_TWO)\
	DECL_ENUM_LAST_ITEMW(x, OPM_ACP_LEVEL_THREE, L"Unknown"))))))

#define OPM_CGMSA_LEVEL_NAMEW(x)	(\
	DECL_ENUM_ITEMW(x, OPM_CGMSA_OFF)\
	DECL_ENUM_ITEMW(x, OPM_CGMSA_COPY_FREELY)\
	DECL_ENUM_ITEMW(x, OPM_CGMSA_COPY_NO_MORE)\
	DECL_ENUM_ITEMW(x, OPM_CGMSA_COPY_ONE_GENERATION)\
	DECL_ENUM_ITEMW(x, OPM_CGMSA_COPY_NEVER)\
	DECL_ENUM_LAST_ITEMW(x, OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED, L"Unknown"))))))))

#define OPM_DPCP_LEVEL_NAMEW(x)	(\
	DECL_ENUM_ITEMW(x, OPM_DPCP_OFF)\
	DECL_ENUM_LAST_ITEMW(x, OPM_DPCP_ON, L"Unknown"))))

#define OPM_HDCP_LEVEL_NAMEW(x)	(\
	DECL_ENUM_ITEMW(x, OPM_HDCP_OFF)\
	DECL_ENUM_LAST_ITEMW(x, OPM_HDCP_ON, L"Unknown"))))

#define OPM_TYPE_ENFORCEMENT_HDCP_PROTECTION_LEVEL_NAMEW(x)	(\
	DECL_ENUM_ITEMW(x, OPM_TYPE_ENFORCEMENT_HDCP_OFF)\
	DECL_ENUM_ITEMW(x, OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_NO_TYPE_RESTRICTION)\
	DECL_ENUM_LAST_ITEMW(x, OPM_TYPE_ENFORCEMENT_HDCP_ON_WITH_TYPE1_RESTRICTION, L"Unknown")))))

#define OPM_RESULT_NAME(hr)	(\
	DECL_ENUM_ITEMW(hr, E_INVALIDARG)\
	DECL_ENUM_ITEMW(hr, E_UNEXPECTED)\
	DECL_ENUM_ITEMW(hr, ERROR_GRAPHICS_OPM_NOT_SUPPORTED )\
	DECL_ENUM_ITEMW(hr, ERROR_GRAPHICS_OPM_INVALID_ENCRYPTED_PARAMETERS )\
	DECL_ENUM_ITEMW(hr, ERROR_GRAPHICS_OPM_NO_VIDEO_OUTPUTS_EXIST )\
	DECL_ENUM_ITEMW(hr, ERROR_GRAPHICS_OPM_INTERNAL_ERROR )\
	DECL_ENUM_ITEMW(hr, ERROR_GRAPHICS_OPM_INVALID_HANDLE )\
	DECL_ENUM_ITEMW(hr, ERROR_GRAPHICS_OPM_SPANNING_MODE_ENABLED )\
	DECL_ENUM_ITEMW(hr, ERROR_GRAPHICS_OPM_THEATER_MODE_ENABLED )\
	DECL_ENUM_ITEMW(hr, ERROR_GRAPHICS_OPM_INVALID_SRM   )\
	DECL_ENUM_ITEMW(hr, ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_HDCP )\
	DECL_ENUM_ITEMW(hr, ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_ACP )\
	DECL_ENUM_ITEMW(hr, ERROR_GRAPHICS_OPM_OUTPUT_DOES_NOT_SUPPORT_CGMSA )\
	DECL_ENUM_ITEMW(hr, ERROR_GRAPHICS_OPM_HDCP_SRM_NEVER_SET )\
	DECL_ENUM_ITEMW(hr, ERROR_GRAPHICS_OPM_RESOLUTION_TOO_HIGH )\
	DECL_ENUM_ITEMW(hr, ERROR_GRAPHICS_OPM_ALL_HDCP_HARDWARE_ALREADY_IN_USE )\
	DECL_ENUM_ITEMW(hr, ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_NO_LONGER_EXISTS )\
	DECL_ENUM_ITEMW(hr, ERROR_GRAPHICS_OPM_SESSION_TYPE_CHANGE_IN_PROGRESS )\
	DECL_ENUM_ITEMW(hr, ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_COPP_SEMANTICS )\
	DECL_ENUM_ITEMW(hr, ERROR_GRAPHICS_OPM_INVALID_INFORMATION_REQUEST )\
	DECL_ENUM_ITEMW(hr, ERROR_GRAPHICS_OPM_DRIVER_INTERNAL_ERROR )\
	DECL_ENUM_ITEMW(hr, ERROR_GRAPHICS_OPM_VIDEO_OUTPUT_DOES_NOT_HAVE_OPM_SEMANTICS )\
	DECL_ENUM_ITEMW(hr, ERROR_GRAPHICS_OPM_SIGNALING_NOT_SUPPORTED )\
	DECL_ENUM_ITEMW(hr, ERROR_GRAPHICS_OPM_INVALID_CONFIGURATION_REQUEST)\
	DECL_ENUM_LAST_ITEMW(hr, E_FAIL, L"")))))))))))))))))))))))))))

class COPMSession
{
public:
	COPMSession(IOPMVideoOutput* pOPMVideoOutput, HRESULT* phr=nullptr);
	virtual ~COPMSession();

	/*
	OPM_GET_CURRENT_HDCP_SRM_VERSION,
	OPM_GET_CONNECTED_HDCP_DEVICE_INFORMATION,
	OPM_GET_ACP_AND_CGMSA_SIGNALING,
	OPM_GET_CONNECTOR_TYPE,
	OPM_GET_SUPPORTED_PROTECTION_TYPES,
	OPM_GET_VIRTUAL_PROTECTION_LEVEL,
	OPM_GET_ACTUAL_PROTECTION_LEVEL,
	OPM_GET_ACTUAL_OUTPUT_FORMAT,
	OPM_GET_ADAPTER_BUS_TYPE,
	OPM_GET_OUTPUT_ID,
	OPM_GET_DVI_CHARACTERISTICS,
	OPM_GET_CODEC_INFO,
	OPM_GET_OUTPUT_HARDWARE_PROTECTION_SUPPORT
	OPM_SET_PROTECTION_LEVEL,
	OPM_SET_ACP_AND_CGMSA_SIGNALING,
	OPM_SET_HDCP_SRM,
	OPM_SET_PROTECTION_LEVEL_ACCORDING_TO_CSS_DVD
	*/

	HRESULT GetCurrentHDCPSRMVersion(ULONG& HDCPSRMVer, ULONG* pulStatusFlags = NULL);
	HRESULT GetConnectedHDCPDeviceInformation(ULONG& ulHDCPFlags, OPM_HDCP_KEY_SELECTION_VECTOR& HDCP_Key_Selection_Vector, ULONG* pulStatusFlags = NULL);
	HRESULT GetACPAndCGMSASignaling(OPM_ACP_AND_CGMSA_SIGNALING& signaling);
	HRESULT GetConnectorType(ULONG& ulConnectorType, ULONG* pulStatusFlags = NULL);
	HRESULT GetSupportedProtectionTypes(ULONG& ulProtectionTypes, ULONG* pulStatusFlags = NULL);
	HRESULT GetVirtualProtectionLevel(ULONG protection_type, ULONG& protection_level, ULONG* pulStatusFlags = NULL);
	HRESULT GetActualProtectionLevel(ULONG protection_type, ULONG& protection_level, ULONG* pulStatusFlags = NULL);
	HRESULT GetActualOutputFormat(OPM_ACTUAL_OUTPUT_FORMAT& output_format);
	HRESULT GetAdaptorBusType(ULONG& ulBusType, ULONG* pulStatusFlags = NULL);
	HRESULT GetOutputID(UINT64& ullOutputID, ULONG* pulStatusFlags = NULL);
	HRESULT GetDVICharacteristics(ULONG& ulCharacteristics, ULONG* pulStatusFlags = NULL);
	HRESULT GetCodecInfo(CLSID clsidCodecMFT, DWORD& Merit);
	HRESULT GetOutputHardwareProtectionSupport(OPM_OUTPUT_HARDWARE_PROTECTION& eSupportState, ULONG* pulStatusFlags = NULL);

	HRESULT SetProtectionLevel(ULONG ulProtectionType, ULONG ulProtectionLevel);
	HRESULT SetHDCPSRM(const uint8_t* pSRMData, size_t cbSRMData, ULONG* pulHDCPSRMVer=nullptr);
	HRESULT SetACPAndCGMSASignaling(OPM_SET_ACP_AND_CGMSA_SIGNALING_PARAMETERS params);
	HRESULT SetProtectionLevelAccordingToCSSDVD(ULONG ulProtectionType, ULONG ulProtectionLevel);

private:
	HRESULT _StatusRequest(GUID guidInformation, OPM_REQUESTED_INFORMATION& request_info, uint8_t* pParams=NULL, size_t cbParams=0);

protected:
	ComPtr<IOPMVideoOutput>			m_spOPMVideoOutput;
	OPM_RANDOM_NUMBER				m_keySession;

	ULONG							m_ulStatusSequence;
	ULONG							m_ulCommandSequence;

protected:
	HRESULT CheckOPMSessionStatus(ULONG ulOPMSessionStatus);
};

